// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//+build !wireinject

package di

import (
	"github.com/Tiratom/gin-study/config"
	"github.com/Tiratom/gin-study/domain/repository_interface"
	"github.com/Tiratom/gin-study/infrastructure/repository_impl"
	"github.com/Tiratom/gin-study/middleware"
	"github.com/Tiratom/gin-study/presentation"
	"github.com/Tiratom/gin-study/usecase"
)

// Injectors from wire.go:

func InitializeEnvironment() *config.Environment {
	environment := config.NewEnvironment()
	return environment
}

func InitializeDB() *config.DB {
	environment := config.NewEnvironment()
	db := config.NewDB(environment)
	return db
}

func InitializeImportanceRepository() *repository_impl.Importance {
	db := InitializeDB()
	importance := repository_impl.NewImportance(db)
	return importance
}

func InitializeImportanceRepositoryInterface() repository_interface.Importance {
	db := InitializeDB()
	importance := repository_interface.NewImportance(db)
	return importance
}

func InitializeTaskRepositoryInterface() repository_interface.Task {
	db := InitializeDB()
	task := repository_interface.NewTask(db)
	return task
}

func InitializeGetTaskUsecase() *usecase.GetTask {
	task := InitializeTaskRepositoryInterface()
	getTask := usecase.NewGetTask(task)
	return getTask
}

func InitializeCreateTaskUsecase() *usecase.CreateTask {
	task := InitializeTaskRepositoryInterface()
	createTask := usecase.NewCreateTask(task)
	return createTask
}

func InitializeUpdateTaskUsecase() *usecase.UpdateTask {
	task := InitializeTaskRepositoryInterface()
	updateTask := usecase.NewUpdateTask(task)
	return updateTask
}

func InitializeTaskServiceServer() *presentation.TaskServiceServer {
	zapLogger := middleware.NewZapLogger()
	getTask := InitializeGetTaskUsecase()
	createTask := InitializeCreateTaskUsecase()
	updateTask := InitializeUpdateTaskUsecase()
	taskServiceServer := presentation.NewTaskServiceServer(zapLogger, getTask, createTask, updateTask)
	return taskServiceServer
}
