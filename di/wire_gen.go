// Code generated by Wire. DO NOT EDIT.

//go:generate go run github.com/google/wire/cmd/wire
//+build !wireinject

package di

import (
	"github.com/Tiratom/gin-study/config"
	"github.com/Tiratom/gin-study/domain/repository_interface"
	"github.com/Tiratom/gin-study/middleware"
	"github.com/Tiratom/gin-study/presentation"
	"github.com/Tiratom/gin-study/usecase/usecase_interface"
)

// Injectors from wire.go:

func InitializeEnvironment() *config.Environment {
	environment := config.NewEnvironment()
	return environment
}

func InitializeDB() *config.DB {
	environment := config.NewEnvironment()
	db := config.NewDB(environment)
	return db
}

func InitializeImportanceRepositoryInterface() repository_interface.Importance {
	db := InitializeDB()
	importance := repository_interface.NewImportance(db)
	return importance
}

func InitializeTaskRepositoryInterface() repository_interface.Task {
	db := InitializeDB()
	task := repository_interface.NewTask(db)
	return task
}

func InitializeGetTaskUsecaseIF() usecase_interface.GetTask {
	task := InitializeTaskRepositoryInterface()
	getTask := usecase_interface.NewGetTask(task)
	return getTask
}

func InitializeCreateTaskUsecaseIF() usecase_interface.CreateTask {
	task := InitializeTaskRepositoryInterface()
	createTask := usecase_interface.NewCreateTask(task)
	return createTask
}

func InitializeUpdateTaskUsecaseIF() usecase_interface.UpdateTask {
	task := InitializeTaskRepositoryInterface()
	updateTask := usecase_interface.NewUpdateTask(task)
	return updateTask
}

func InitializeDeleteTaskUsecaseIF() usecase_interface.DeleteTask {
	task := InitializeTaskRepositoryInterface()
	deleteTask := usecase_interface.NewDeleteTask(task)
	return deleteTask
}

func InitializeSearchTaskUsecaseIF() usecase_interface.SearchTask {
	task := InitializeTaskRepositoryInterface()
	searchTask := usecase_interface.NewSearchTask(task)
	return searchTask
}

func InitializeTaskServiceServer() *presentation.TaskServiceServer {
	zapLogger := middleware.NewZapLogger()
	getTask := InitializeGetTaskUsecaseIF()
	createTask := InitializeCreateTaskUsecaseIF()
	updateTask := InitializeUpdateTaskUsecaseIF()
	deleteTask := InitializeDeleteTaskUsecaseIF()
	searchTask := InitializeSearchTaskUsecaseIF()
	taskServiceServer := presentation.NewTaskServiceServer(zapLogger, getTask, createTask, updateTask, deleteTask, searchTask)
	return taskServiceServer
}
